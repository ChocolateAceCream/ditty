[{:title=>"Introduction", :body=>"Welcome to RubyOps.\r\n\r\nI'm starting this blog as a place to \"take notes\" on the various different problems I encounter in supporting Ruby applications from a Dev Ops perspective. \r\n\r\nThis blog is running on [Ditty](http://ditty.rubyops.net/), a simple [Sinatra](http://www.sinatrarb.com/) based blog application, which I am building. It's very much a work in progress, but my plan is to continue to build and extend it in to a full featured multi-user blog application. I started this project to learn more about Sinatra, Ruby and it's supporting tools and technologies. \r\n\r\nThanks!\r\n\r\n-J", :created_at=>2012-05-29 18:13:41 UTC, :updated_at=>2012-05-29 18:14:06 UTC, :tags=>["introduction"]},
{:title=>"Using Nginx and AWS to proxy sub-domains", :body=>"I had been thinking on ways to use free cloud services to handle a decent amount of traffic at no cost (or perhaps low cost).\r\n\r\nI have a co-worker that's using three free Heroku accounts to serve as a backend for his iPhone application, which using a random number generator, randomly connects to one of the three servers, thus allowing him to serve three connections per second, instead of the free account limit of one. (Brillant!)\r\n\r\nI got to thinking, how would I do something like this if it were a web application? Well, how about using a free (for the first year at least) AWS micro image to run Nginx as a proxy or load balancer?\r\n\r\n#### Step 1: Set up your end point\r\n\r\nThis is a variable. Say you wanted to point http://blog.example.com/ to a Tumblr Blog - http://example.tumblr.com/. But this is just an example. You could pretty much use anything, a free Heroku app, another AWS image, your desktop with DynDNS setup, etc., etc., etc.\r\n\r\n#### Step 2: Setup AWS with Nginx\r\n\r\n1. Create an account at http://aws.amazon.com/\r\n1. Spool up a new Ubuntu image.\r\n1. Ensure that security group allows HTTP and SSH.\r\n1. Under \"Elastic IPs\", click \"Allocate New Address\" and assign it to your image.\r\n1. Connect to your image and install nginx:\r\n1.1. _sudo apt-get update_\r\n1.1. _sudo apt-get install nginx_\r\n1. Configure your proxy(ies):\r\n\r\n        $ sudo cat /etc/nginx/sites-enabled/blog\r\n        server {\r\n          server_name blog.example.com;\r\n          location / {\r\n            proxy_pass http://example.tumblr.com;\r\n          }\r\n        }\r\n\r\n        $ sudo ls -al /etc/nginx/sites-enabled/blog \r\n        lrwxrwxrwx 1 root root 23 2012-03-18 00:23 /etc/nginx/sites-enabled/blog \r\n                                -> ../sites-available/blog\r\n\r\n1. Start Nginx with: _sudo nginx_\r\n\r\n#### Step 3: Setup your sub-domain.\r\n\r\nI use Domain Monger, which is pretty simple. You create a DNSPlus CNAME, point the sub-domain (blog.mervine.net in this case) to the ElasticIP that you've created with the AWS console above.\r\n\r\n\r\n#### Using Nginx as a Load Balancer\r\n\r\nThe whole purpose of this idea was to load balance other applications. I realize I'm not doing that above (of course), but the same principals apply only using Nginx's LB config instead of proxy. See: http://library.linode.com/web-servers/nginx/configuration/front-end-proxy-and-software-load-balancing#sph_software-load-balancing\r\n", :created_at=>2012-05-29 21:36:07 UTC, :updated_at=>2012-05-29 21:36:07 UTC, :tags=>["nginx", "aws"]},
{:title=>"How-to: Setup MySQL and RoR on AWS", :body=>"### Warning!!\r\n\r\nWhen I wrote this, I misunderstood the AWS pricing models when I was originally putting this together. The following configuration would run you about $8 per month for the first year and around $16 per month each following year. Please see [Amazon's AWS Pricing page](http://aws.amazon.com/pricing/ec2/) for details.\r\n\r\n### Introduction\r\n\r\nI have been working on setting up RoR with MySQL on an AWS instance and ran in to some oddities, so I decided to document the steps I took and lay it all out real nice and pretty.\r\n\r\n\r\n####First, these are some details about the setup I wanted\r\n\r\n- MySQL on it's own host\r\n- RoR app on it's own host\r\n- ruby 1.9.2p280\r\n- git\r\n- sans rvm\r\n- bundler with gems installed in an app specific vendor/bundle director\r\n- AMI: ubuntu/images/ebs/ubuntu-oneiric-11.10-amd64-server-20120222 (ami-baba68d3)\r\n    - I used this for both the mysql and application host\r\n\r\n####Assumptions\r\n\r\n1. You've already created the AWS images.\r\n1. MySQL host: mysql.hostname\r\n1. App Host: app.hostname\r\n1. Username: myuser\r\n1. Project name: project\r\n\r\n\r\n####Prep your AWS images\r\n\r\nFor both machines, I create a new user, as not to use 'ubuntu' or 'root' as my main user.\r\n\r\n    desktop~$ ssh -i ~/.ssh/my_aws.pem ubuntu@<aws_host>\r\n    awshost~$ sudo su -\r\n    awshost~$ useradd -G sudo -m -r --shell /bin/bash myuser \\\r\n       && mkdir -p /home/myuser/.ssh \\\r\n       && cp /home/ubuntu/.ssh/authorized_keys /home/myuser/.ssh/ \\\r\n       && chown -R myuser: /home/myuser/.ssh \\\r\n       && passwd myuser\r\n    ... enter new password ...\r\n    awshost~$ exit\r\n    desktop~$ ssh -i ~/.ssh/my_aws.pem myuser@<aws_host>\r\n    awshost~$ sudo userdel ubuntu\r\n\r\n\r\n## MySQL\r\n\r\nInstall MySQL:\r\n\r\n    $ sudo apt-get install mysql-server mysql-client\r\n    ... output omitted ...\r\n\r\nSetup MySQL's basic permissions:\r\n\r\n    $ sudo mysqladmin -u root -h localhost password 'password'\r\n    ... output omitted ...\r\n    $ mysql -u root -p\r\n    ... output omitted ...\r\n    mysql> GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%' \r\n         > IDENTIFIED BY \"password\";\r\n    Query OK, 0 rows affected (0.00 sec)\r\n\r\n    mysql> FLUSH PRIVILEGES;\r\n    Query OK, 0 rows affected (0.00 sec)\r\n\r\n    mysql> exit\r\n    Bye\r\n\r\nUpdate MySQL config to allow for external connectivity:\r\n\r\n    $ sudo vi /etc/mysql/my.cnf\r\n\r\n> Change: ``bind-address    = 127.0.0.1``\r\n> To: ``bind-address    = <your ip address>``\r\n\r\nUpdate iptables:\r\n\r\n    $ sudo /sbin/iptables -A INPUT -i eth0 -p tcp --destination-port 3306 -j ACCEPT\r\n    $ sudo iptables-save\r\n    $ sudo iptables-apply\r\n    $ sudo service mysql restart\r\n\r\n\r\nYou should now be able to connect to *mysql.hostname* from an external mysql client... ``desktop~$ mysql -u myuser -h mysql.hostname -p``\r\n\r\n#### Reminder: Create Rails Database Tables\r\n\r\n    $ mysql -u myuser -h mysql.hostname -p\r\n\r\n    mysql> CREATE DATABASE 'project_development';\r\n    ... output omitted ...\r\n\r\n    mysql> CREATE DATABASE 'project_test';\r\n    ... output omitted ...\r\n\r\n    mysql> CREATE DATABASE 'project_production';\r\n    ... output omitted ...\r\n\r\n\r\n\r\n## Ruby and Rails Setup\r\n\r\nInstall Ruby, Rubygems and dependancies:\r\n\r\n    $ sudo su -\r\n    $ apt-get -y update \\\r\n      && apt-get -y install git-core \\\r\n      && apt-get -y install ruby1.9.1 \\\r\n      && apt-get -y install ruby1.9.1-dev \\\r\n      && apt-get -y install build-essential \\\r\n      && apt-get -y install mysql-client \\\r\n      && apt-get -y install libmysqlclient-dev \\\r\n      && gem install rubygems-update --no-ri --no-rdoc \\\r\n      && update_rubygems \\\r\n      && gem install bundler --no-ri --no-rdoc\r\n\r\nCheckout your Rails project:\r\n\r\n    $ cd ~\r\n    $ git clone git@github.com:mygituser/project.git\r\n    $ cd project\r\n\r\nConfigure and run Bundler:\r\n\r\n    $ bundle config build.mysql --with-mysql-config=/usr/bin/mysql_config\r\n    $ bundle install --path ./vendor/bundle\r\n    ... output omitted ...\r\n\r\nRun tests:\r\n\r\n    $ bundle exec rake test\r\n    ... output omitted ...\r\n\r\n> Note: This should validate that everything is setup and working correctly, including your database connections. \r\n\r\n#### Reminder: Don't forget to update your database configs:\r\n\r\n    $ vi config/database.yml \r\n\r\nExample configuration:\r\n\r\n    development:\r\n      adapter: mysql\r\n      database: project_development\r\n      encoding: utf8\r\n      username: myuser\r\n      password: password\r\n      host: mysql.hostname\r\n\r\n    test:\r\n      adapter: mysql\r\n      database: project_test\r\n      encoding: utf8\r\n      username: myuser\r\n      password: password\r\n      host: mysql.hostname\r\n\r\n    production:\r\n      adapter: mysql\r\n      database: project_production\r\n      encoding: utf8\r\n      username: myuser\r\n      password: password\r\n      host: mysql.hostname\r\n\r\n\r\n\r\nStart Rails:\r\n\r\n    $ sudo bundle exec rails s -p 80\r\n\r\n> Note: I've only opened port 80 on my AWS image, which is why I'm using both 'sudo' and the '-p 80' flag. If you have port 3000 open, you can start rails with... ``bundle exec rails s``\r\n\r\n\r\n## Serving for Real\r\n\r\nIn the real world, you aren’t going to be using WEBrick, or at least I would hope not. My personal preference is to use Nginx and Unicorn (although there are lots of options out there). So here’s a quick how to on Nginx and Unicorn for those that are interest.\r\n\r\n####Unicorn\r\n\r\nInstall Unicorn using Bundler:\r\n\r\n    $ vi /home/myuser/project/Gemfile\r\n\r\nAdd the following line:\r\n\r\n    gem 'unicorn'\r\n\r\n\r\nUpdate installed gems:\r\n\r\n> Note: this assumes you've already do the *bundle install --path ./vendor/bundle* step mentioned above.\r\n\r\n    $ cd /home/myuser/project\r\n    $ bundle\r\n    ... output omitted ...\r\n\r\n> Note: you can install Unicorn directly, without Bundler, by running the following: ``$ sudo gem install unicorn``\r\n\r\n\r\nConfigure Unicorn:\r\n\r\nTo configure unicorn, you’re going to want to create a config file for it. By default, it doesn’t need one and you can simply start it with bundle exec unicorn -p 3000 from within your project directory, exactly like WEBrick. However, this isn’t really ideal for real systems.\r\n\r\nCreate a config file:\r\n\r\n    $ vi /home/myuser/project/config/unicorn.conf\r\n\r\nExample file:\r\n\r\n    worker_processes 8\r\n    listen \"0.0.0.0:3000\"\r\n    pid \"/home/myuser/project/log/unicorn.pid\"\r\n    stderr_path \"/home/myuser/project/log/unicorn_stderr.log\"\r\n    stdout_path \"/home/myuser/log/unicorn_stdout.log\"\r\n\r\n######[example file gist](https://gist.github.com/2127559)\r\n\r\nStart Unicorn:\r\n\r\n    $ cd /home/myuser/project && \\ \r\n    bundle exec unicorn -c /home/myuser/project/config/unicorn.conf -D\r\n\r\n> Stopping Unicorn (the dirty way): ``ps aux | grep unicorn | grep project | cut -d\" \" -f2 | xargs kill``\r\n\r\n\r\n\r\n####Nginx\r\n\r\nInstall Nginx:\r\n\r\n    $ sudo apt-get install -y nginx\r\n\r\n\r\nConfigure Nginx:\r\n\r\n    $ sudo vi /etc/nginx/sites-available/default\r\n\r\n> Note, I have removed all commented lines from the default configuration, except the lines I commented out myself.\r\n\r\n    server {\r\n\r\n      #root /usr/share/nginx/www;\r\n      root /home/myuser/blog/public;\r\n      index index.html index.htm;\r\n\r\n      server_name app.hostname;\r\n\r\n      location ~ ^/assets/ {\r\n        root /home/myuser/blog/app/assets/$1;\r\n      }\r\n\r\n      location / {\r\n        proxy_pass http://127.0.0.1:3000;\r\n      }\r\n\r\n      #location /doc {\r\n      # root /usr/share;\r\n      # autoindex on;\r\n      # allow 127.0.0.1;\r\n      # deny all;\r\n      #}\r\n\r\n      #location /images {\r\n      # root /usr/share;\r\n      # autoindex off;\r\n      #}\r\n    }\r\n\r\n######[example file gist](https://gist.github.com/2127051)\r\n\r\nAdditionally, you can update your log directories to point to the rails log directory if you want, by editing /etc/nginx/nginx.conf and changing the following lines:\r\n\r\n    access_log /var/log/nginx/access.log;\r\n    error_log /var/log/nginx/error.log;\r\n\r\n\r\n## In Closing\r\n\r\nThis is my guide on setting up Ruby and Rails with MySQL, using Nginx and Unicorn. I don't claim to be the foremost expert on any of these technologies, but this should work pretty well for most sites. I highly recommend running this on something better then an AWS t1.micro, however, that should get you started. Enjoy!\r\n\r\n## References\r\n\r\n* [Amazon AWS](http://aws.amazon.com/)\r\n* [Bundler](http://gembundler.com/)\r\n* [git](http://github.com/)\r\n* [MySQL](http://mysql.com/)\r\n* [Nginx](http://nginx.org/)\r\n* [Rails](http://rubyonrails.org/)\r\n* [Ruby](http://www.ruby-lang.org/en/)\r\n* [Rubygems](http://rubygems.org/)\r\n* [Ubuntu](http://www.ubuntu.com/)\r\n* [Unicorn](http://unicorn.bogomips.org/)\r\n", :created_at=>2012-05-29 21:39:11 UTC, :updated_at=>2012-05-29 21:39:11 UTC, :tags=>["nginx", "aws", "how-to", "mysql", "ruby on rails", "ruby", "git", "bundler", "ubuntu", "unicorn"]},
{:title=>"Mocking HTTP Response body for rSpec", :body=>"I'm sure there are many ways to do this -- probably better ways -- but this is a simple way I've done it.\r\n\r\n    class FakeResponse\r\n      attr :body\r\n      def initialize body\r\n        @body = body\r\n      end\r\n    end\r\n\r\n    describe Foo\" do\r\n      before(:each) do\r\n        @data = File.read \"./http/response/body.txt\"\r\n        Net::HTTP.stub!(:post_form).and_return(FakeResponse.new @data)\r\n      end\r\n      it \"should return stuff\" do\r\n        Foo.fetch( :key => \"foo\", :uri => \"http://foobar.com/\" ).should eq(@data)\r\n      end\r\n    end\r\n\r\n\r\n#### Note:\r\n> Since originally coming up with this, I found [VCR](http://rubygems.org/gems/vcr), check it out, it does this type of thing in some very cool ways. ", :created_at=>2012-05-29 21:42:11 UTC, :updated_at=>2012-05-29 22:48:02 UTC, :tags=>["ruby", "rspec", "vcr"]},
{:title=>"Sourcing and Setting Environment Variables in Ruby", :body=>"I was looking for a simple way to source and set a bash environment variable from a file, in this specific instance, I can't be 100% sure that the any steps I take to ensure that the file itself is sourced on the host before Rails is started, nor can I impact the format of the file itself (e.g. changing it to YAML).\r\n\r\nHere are the best options I've found.\r\n\r\n#### File.readline\r\n\r\nThis is not the method I used, but it's useful. I would use this if I needed to set multiple variables from the source file.\r\n\r\n        # assumes the following format\r\n        #  NAME1=value1\r\n        #  NAME2=value2\r\n        File.readline \"/my/rc_file\" do |line|\r\n                key, value = line.split \"=\"\r\n                ENV[key] = value\r\n        end\r\n\r\n... or ...\r\n\r\n        # assumes the following format\r\n        #  export NAME1=value1\r\n        #  export NAME2=value2\r\n        #\r\n        # Note: I really don't like this for any situation \r\n        # other then perhaps stand-alone scripting.\r\n        File.readline \"/my/rc_file\" do |line|\r\n                line.gsub(/export /, \"\")\r\n                key, value = line.split \"=\"\r\n                ENV[key] = value\r\n        end\r\n\r\n#### Pure bash via backticks\r\n\r\nThis is the method I chose, as I only needed to set a single variable and knew the name of it. Additionally, I did it this way to ensure that the variable remained \"nil\" if the variable wasn't set for whatever reason.\r\n\r\n        unless ENV['KEY']\r\n                my_key = `source /my/rc_file 2> /dev/null && echo $KEY`.chomp\r\n                ENV['KEY'] = my_key unless my_key.empty? \r\n        end\r\n\r\n", :created_at=>2012-05-29 21:49:45 UTC, :updated_at=>2012-05-29 21:49:45 UTC, :tags=>["ruby", "bash"]},
{:title=>"Deploy Sinatra with Vlad and Git", :body=>"Deploying [Sinatra](http://sinatrarb.com/) with [Vlad the Deployer](http://rubyhitsquad.com/Vlad_the_Deployer.html) and [Git](http://github.com/) is basically just deploying with Vlad.\r\n\r\n### Step One - Install Vlad!\r\n\r\nInstall the gem: \r\n\r\n        gem install vlad\r\n        gem install vlad-git\r\n        gem install vlad-unicorn # if you're using unicorn\r\n\r\nOr via [bundler](http://gembundler.com/):\r\n\r\n        $ vi Gemfile\r\n        \r\n        gem 'vlad', :require => false\r\n        gem 'vlad-git', :require => false\r\n        gem 'vlad-unicorn', :require => false  \r\n        #   again, if you're using unicorn\r\n        \r\n\r\n### Step Two - Configure Vlad\r\n\r\nFirst, you have make sure that [rake](http://rake.rubyforge.org/) is loading Vlad correctly, so open up your 'APP_ROOT/Rakefile' and add the following lines:\r\n\r\n        begin\r\n          require 'vlad'\r\n          Vlad.load :scm => :git, :app => :unicorn\r\n        rescue LoadError\r\n          # do nothing\r\n        end\r\n\r\nNote:\r\n> ':scm => :git' and ':app => :unicorn' are used to to configure the plugins I've installed above. If you weren't using Unicorn, for example, you would omit ':app => :unicorn'. \r\n\r\n\r\nSecond, you have setup a _deploy.rb_ (much like Capistrano, for those that know it). Create 'APP_ROOT/config/deploy.rb' with the following data:\r\n\r\n        set :application, \"ExampleApp\"\r\n        set :domain, \"www.example.com\"\r\n        set :deploy_to, \"/home/username/example_app\"\r\n        set :repository, 'git://github.com/path_to/example_app.git'\r\n\r\n        # unicorn if used\r\n        set :unicorn_pid, \"\#{deploy_to}/shared/log/unicorn.pid\"\r\n        # to ensure RACK_ENV \r\n        set :unicorn_command, \"cd \#{deploy_to}/current && RACK_ENV=production unicorn\"\r\n        # if bundler is being used...\r\n        # set :unicorn_command, \"cd \#{deploy_to}/current && RACK_ENV=production bundle exec unicorn\"\r\n\r\nThrid, you have to ensure that you can SSH to your remote host (www.example.com per the example above). I'm not going to turn this in to a long SSH tutorial, but before running Vlad for the first time be sure you can type 'ssh hostname' with no additional params, otherwise you'll either need to update your '~/.ssh/config' file with something like:\r\n\r\n        Hostname www.example.com\r\n        User <your_remote_user>\r\n        IdentityFile ~/.ssh/<remote_id_file>\r\n        ForwardAgent yes\r\n\r\nOptionally, Vlad has methods of configuring ssh params:\r\n\r\n        set :user, \"username\"\r\n        # ... and ...\r\n        set :domain, \"\#{user}@www.example.com\"\r\n\r\nBut I find this to be less pretty, personally.\r\n\r\n### Step Three - Vlad Deployment\r\n\r\nOnce Vlad is configured by following the above, you simply have to set it up and deploy it. For a full list of Vlad commands use: `$ rake -T vlad` However, here are the priamry ones I use:\r\n\r\nTo setup the directory struction for deployment (first time use only): `$ rake vlad:setup`\r\n\r\nTo push code to the remote server (used on every deploy): `$ rake vlad:update`\r\n\r\nTo (re)start the application server (used on every deploy): `$ rake vlad:start_app`\r\n\r\nThat's it.\r\n\r\nNote:\r\n> For Sinatra app's you can ignore 'vlad:migrate', it is designed to use Rails migrations, which you don't have.\r\n\r\n### What's Vlad do remotely?\r\n\r\n'setup' and 'update' together creates the following tree starting at the previously set 'deploy_to' location:\r\n\r\n        ~/example_app/\r\n                ./current -> ~/example_app/releases/<current version datestamp>\r\n                ./releases/\r\n                ./releases/<release datestamp>\r\n                ./revisions.log\r\n                ./scm/\r\n                ./scm/repo/\r\n                ./scm/repo/<git clone contents>\r\n                ./shared/\r\n                ./shared/log/\r\n                ./shared/pids/\r\n                ./shared/system/\r\n\r\nOn each subsequent update, a new folder will be created in './releases/' and the './current' symlink will be updated to point to it.\r\n\r\n\r\n### Note to Bundler users!\r\n\r\nBy default, 'rake vlad:update' will not run _bundle install_. You'll need to create a custom vlad deployment task for that by adding the following to your 'Rakefile':\r\n\r\n    task \"vlad:deploy\" => %w[ vlad:update vlad:bundle:install ]\r\n\r\nAnd adding the following to the very top of your 'config/deploy.rb':\r\n\r\n    require \"bundler/vlad\"\r\n\r\n\r\nYou would then run... `rake vlad:deploy` ...instead of... `rake vlad:update` ...when installing your application.", :created_at=>2012-05-29 22:40:27 UTC, :updated_at=>2012-05-30 00:09:32 UTC, :tags=>["git", "bundler", "unicorn", "sinatra", "vlad", "ssh"]},
{:title=>"Dynamically Generated Object with Accessors", :body=>"I was working on created a super class for use in importing various unknown data types from hashs, so I started playing around with dynamic instance variable and attr_accessor generation and came up with the following, which I thought I would share.\r\n\r\nEnjoy!\r\n\r\n    class Item\r\n      def initialize item\r\n        raise \"expected Hash param\" unless item.kind_of? Hash\r\n        item.each do |key,value|\r\n          instance_variable_set(clean_key(key), value)\r\n          define_singleton_method(key.to_s) { instance_variable_get( clean_key(key) ) }\r\n          define_singleton_method(\"\#{key.to_s}=\") { |val| instance_variable_set( clean_key(key), val ) }\r\n        end\r\n      end\r\n    \r\n      protected\r\n      # ensure all keys are clean keys, was more necessary when using\r\n      # using missing method, but keeping it to be safe\r\n      def clean_key key\r\n        \"@\#{key.to_s.gsub(/^\\@/, \"\").gsub(/=$/, \"\")}\".to_sym\r\n      end\r\n    end\r\n\r\n\r\nAs always, there may be better/cleaner ways to do this, but this is mine and it worked rather well in with a small amount of code.", :created_at=>2012-05-29 21:45:42 UTC, :updated_at=>2012-05-29 22:47:23 UTC, :tags=>["ruby"]},
{:title=>"Sinatra Mobile Dection - rack-mobile-detect", :body=>"I was looking for a simple way to detect mobile devices for this blog, a Sinatra application, and found [rack-mobile-detect](https://github.com/talison/rack-mobile-detect).\r\n\r\n\r\n##### Gemfile:\r\n\r\n    gem 'rack-mobile-detect'\r\n\r\n\r\n##### config.ru:\r\n\r\n    require '<other stuff>'\r\n    require 'rack/mobile-detect'\r\n\r\n    # ... other config.ru stuff ...\r\n    use Rack::MobileDetect\r\n    # ... other config.ru stuff ...\r\n\r\n##### app.rb:\r\n\r\n\r\n    require 'sinatra'\r\n    helpers do\r\n      def get_layout\r\n        @layout_default = ( request.env['X_MOBILE_DEVICE'] ? :layout_mobile : true )\r\n      end\r\n\r\n    end\r\n\r\n    before do\r\n      get_layout()\r\n    end\r\n\r\n    get \"/\" do\r\n      erb :index, :layout => @layout_default\r\n    end\r\n", :created_at=>2012-05-30 00:19:54 UTC, :updated_at=>2012-05-30 00:19:54 UTC, :tags=>["ruby", "sinatra", "rack", "mobile"]},
{:title=>"Configurable Template Engine in Sinatra", :body=>"A lot of people have taken to using HAML, example \"sinatra-authentication\" uses it by default. I personally don't like it, but I don't judge either. So that said, I wish that more apps out there would steer away from implicitly defining haml calls in their apps. Here's an easy way to allow the template engine to be configurable in Sinatra\r\n\r\n    configure do\r\n      set :template_engine, :haml\r\n    end\r\n    \r\n    get \"/\" do\r\n      send settings.template_engine, :index\r\n    end\r\n    \r\n    get \"/no_layout\" do\r\n      send settings.template_engine, :no_layout, :layout => false\r\n    end\r\n\r\n\r\n\r\nIf you want to get tricky, you could also use haml if it's installed, otherwise, default to erb with this...\r\n\r\n    begin\r\n      require 'haml'\r\n      @template = :haml\r\n    rescue LoadError\r\n      @template = :erb\r\n    end\r\n    \r\n    configure do\r\n      set :template_engine, @template\r\n    end\r\n  \r\n#### note\r\n\r\nI'm still setting using \"set\", to ensure that it's available in templates for those times when you're nesting template calls\r\n\r\n    # views/some_template.erb\r\n    <p>\r\n      <%= send settings.template_engine, :nested_template, :layout => false %>\r\n    </p>\r\n\r\nWhile true that you could perhaps assume \"erb\" in the above example, erb is always loaded. This example would allow you manually call an \"erb\" include which chooses \"haml\" or whatever, based on your setting. Edge-case perhaps, but still.\r\n", :created_at=>2012-05-30 04:32:12 UTC, :updated_at=>2012-05-30 04:39:12 UTC, :tags=>["ruby", "sinatra", "haml", "erb"]},
{:title=>"HAML link trailing whitespace sucks!", :body=>"I  was having issues with whitespace at the end of links whose text is being populated by a variable, example:\r\n\r\n    %a{ :href => \"/foo\" }\r\n        = my_foo\r\n\r\nWas resulting in:\r\n\r\n    <a href=\"/foo\">\r\n        My Foo\r\n    </a>\r\n\r\nTo fix this, I was able to do this...\r\n\r\n    %a{ :href => \"/foo\" } \#{my_foo}\r\n\r\nResulting in:\r\n\r\n    <a href=\"/foo\">My Foo</a>\r\n\r\nTa-Dah!!", :created_at=>2012-05-31 05:34:12 UTC, :updated_at=>2012-06-02 07:39:11 UTC, :tags=>["ruby", "haml"]},
{:title=>"vlad-push", :body=>"### Intro\r\n\r\n[Vlad](http://rubyhitsquad.com/Vlad_the_Deployer.html) is a simple [Rake](http://rake.rubyforge.org/) based deployment tool, similar to [Capistrano](http://capify.org), which allows for easily managing code deployments on multiple servers and various environments. I'm not going to take a deep dive in to Vlad here and now, but you can [learn more about it here](http://docs.seattlerb.org/vlad/doco/getting_started_txt.html).\r\n\r\nVlad is designed around the idea of deploying from an SCM -- svn by default, but it also support [git](http://github.com) through a nice plugin ([vlad-git](https://github.com/jbarnette/vlad-git)).  Some time back, I ran in to an issue where I was trying to deploy to an AWS cluster from a firewalled repo and opening it was not an option. Thus [vlad-push](http://jmervine.github.com/vlad-push/doc/index.html) was born.\r\n\r\n### vlad-push\r\n\r\n_vlad-push_ allows for deploying via Vlad sans SCM. And it's fairly simple. I takes your local code, wraps it up and pushes it to the remote server(s).\r\n\r\n### Installation\r\n\r\nTo install _vlad-push_, just install the gem. It will (of course) install Vlad if it isn't already installed.\r\n\r\n    gem install vlad-push\r\n\r\n\r\nIf installing via [Bundler](http://gembundler.com/), I recomment that you also ':require => false', as I've heard reports that Bundler's auto require \"feature\" can sometime mess things up.\r\n\r\n    # file: Gemfile\r\n    source :rubygems\r\n    group :deployment do\r\n      gem 'rake'\r\n      gem 'vlad', :require => false\r\n      gem 'vlad-push', :require => false\r\n    end\r\n\r\nI'm also including Rake in there, but Vlad should take care of that for you via it's dependancies if you don't include it.\r\n\r\n\r\n### Configuration\r\n\r\nOnce installed, there are a few configuration steps, above and beyond Vlad's configuration. For the purpose of this post, I'm going to assume that you've already followed Vlad's instructions and configured you servers accordingly.\r\n\r\nTo make Vlad and _vlad-push_ available to Rake, you'll need to set up your Rakefile accordingly.\r\n\r\nIn it's simplest form, you would want to add this:\r\n\r\n    # file: <APP_ROOT>/Rakefile\r\n    require 'vlad'\r\n    Vlad.load(:scm => :push)\r\n    # ':scm => :push' tells Vlad to use vlad-push.\r\n\r\nIf you want to be safer, and more importantly allow Rake to work without Vlad (and _push_) installed you'll want to do the following.\r\n\r\n    # file: <APP_ROOT>/Rakefile\r\n    begin\r\n      require 'vlad'\r\n      Vlad.load(:scm => :push)\r\n    rescue LoadError\r\n      # do nothing\r\n    end\r\n\r\nEither one of these two blocks will surface Vlad and _vlad-push_ tasks within Rake.\r\n\r\n    $ bundle exec rake -T vlad\r\n    rake vlad:cleanup         # Clean up old releases.\r\n    rake vlad:create_extract  # Built the extracted tarball to be pushed from the CWD\r\n    rake vlad:debug           # Show the vlad setup.\r\n    rake vlad:deploy          # Runs push and update / deploy\r\n    rake vlad:invoke          # Invoke a single command on every remote server.\r\n    rake vlad:migrate         # Run the migrate rake task for the the app.\r\n    rake vlad:push            # Push current working directory to remote servers.\r\n    rake vlad:push_cleanup    # Clean up archive files created by push.\r\n    rake vlad:rollback        # Rolls back to a previous version and restarts.\r\n    rake vlad:setup           # Setup your servers.\r\n    rake vlad:setup_app       # Prepares application servers for deployment.\r\n    rake vlad:start           # (Re)Start the web and app servers\r\n    rake vlad:start_app       # (Re)Start the app servers\r\n    rake vlad:start_web       # (Re)Start the web servers\r\n    rake vlad:stop            # Stop the web and app servers\r\n    rake vlad:stop_app        # Stop the app servers\r\n    rake vlad:stop_web        # Stop the web servers\r\n    rake vlad:update          # Updates your application server to the latest revision.\r\n\r\nIf you output looks like the above, you've correctly setup Vlad and vlad-push.\r\n\r\n\r\nAt this point, you can run _rake vlad:push_ with no additional configurations, however, there are a few default options that you may want to overwrite in your deploy.rb.\r\n\r\n    # file: <APP_ROOT>/config/deploy.rb\r\n    #\r\n    # These are the defaults:\r\n    #\r\n    # set :repository,    \"/tmp/repo\"\r\n    # set :extract_dir,   \"/tmp\"\r\n    # set :extract_file,  \"vlad-push-extract-\#{release_name}.tgz\"\r\n\r\n### Usage\r\n\r\nIf you're familar with Vlad, the usage is almost identical, when setting up from scratch you would run the following, in order:\r\n\r\n    $ rake vlad:setup\r\n    $ rake vlad:push\r\n    $ rake vlad:update\r\n    $ rake vlad:start_app\r\n\r\nAdditionally, I have included a _vlad:deploy_ task, which pushes and updates in one step.\r\n\r\n    $ rake vlad:deploy\r\n\r\n\r\nThat's it, you're done. I'm done. Enjoy.\r\n\r\n\r\n### Resources\r\n\r\n* [Fork on Github](https://github.com/jmervine/vlad-push)\r\n* [API Documentation](http://jmervine.github.com/vlad-push/doc/index.html)\r\n* [_vlad-push_ on RubyGems.org](https://rubygems.org/gems/vlad-push)\r\n", :created_at=>2012-05-31 19:20:19 UTC, :updated_at=>2012-05-31 23:31:22 UTC, :tags=>["ruby", "vlad", "vlad-push", "deployment", "rake"]},
{:title=>"MongoMapper: Overwriting a Collection Name", :body=>"I found this very hard to find online, so I'm dropping a post in here with it. To overwrite a collection name when using [MongoMapper](http://mongomapper.com/) build your model like so:\r\n\r\n    require 'mongomapper'\r\n    class Collection\r\n      include MongoMapper::Document\r\n      # default collection name is \"collections\" which\r\n      # looks for 'db.collections' in mongo.\r\n\r\n      set_collection_name \"some_collections\"\r\n      # new collection name is \"some_collections\" which\r\n      # looks for 'db.some_collections' in mongo.\r\n\r\n      key :some_data, String\r\n\r\n    end", :created_at=>2012-06-02 21:31:07 UTC, :updated_at=>2012-06-02 21:31:07 UTC, :tags=>["ruby", "mongo_mapper", "mongo"]},
{:title=>"Killing whitespace in HAML", :body=>"HAML really like's to drop tag elements to the next line and personally, I find it a total pain. The [HAML REFERENCE](http://haml.info/docs/yardoc/file.HAML_REFERENCE.html#whitespace_removal__and_) has some examples removing whitespace, but through trial and error I was able to find a few edge-cases that weren't mentioned. \r\n\r\n## From the HAML Reference\r\n\r\n#### Example 1\r\n\r\n    %blockquote<\r\n      %div\r\n        Foo!\r\n\r\n\r\nResult\r\n    \r\n    <blockquote><div>\r\n      Foo!\r\n    </div></blockquote>\r\n\r\n\r\n#### Example 2\r\n\r\n    %img\r\n    %img>\r\n    %img\r\n\r\n\r\nResult\r\n    \r\n    <img /><img /><img />\r\n\r\n\r\n#### Example 3\r\n\r\n    %p<= \"Foo\\nBar\"\r\n\r\n\r\nResult\r\n    \r\n    <p>Foo\r\n    Bar</p>\r\n\r\n\r\n#### Example 4\r\n\r\n    %img\r\n    %pre><\r\n      foo\r\n      bar\r\n    %img\r\n\r\n\r\nResult\r\n    \r\n    <img /><pre>foo\r\n    bar</pre><img />\r\n\r\n\r\n## Expanded Examples\r\n#### Example 1\r\nLet's put that all together in to some advanced example.\r\n\r\n    %div\r\n      %span.link<\r\n        %a{ :href => \"/\" }>=link_name\r\n      %span.small<= after_link\r\n\r\n\r\nResult\r\n    \r\n    <div>\r\n      <span class=\"link\"><a href=\"/\">Link Test</a></span>\r\n      <span class=\"small\">After Link Text</span>\r\n    </div>\r\n\r\n\r\n#### Example 2\r\nNow let's bring everything between the _div_ on to a single link.\r\n\r\n    %div\r\n      %span.link<\r\n        %a{ :href => \"/\" }>=link_name\r\n      %span.small><\r\n        = after_link\r\n\r\n\r\nResult\r\n    \r\n    <div>\r\n      <span class=\"link\"><a href=\"/\">Link Test</a></span><span class=\"small\">After Link Text</span>\r\n    </div>\r\n\r\n\r\n#### Example 3\r\nAnd if we have more then one set of spans, like through a loop.\r\n\r\n    - links = [ \"Link Test 1\", \"Link Test 2\" ]\r\n    %div\r\n      - links.each do |link_name| \r\n        %span.link\r\n          %a{ :href => \"/\" }><=link_name\r\n        %span.small><=after_link\r\n    \r\n\r\nResult\r\n    \r\n    <div>\r\n      <span class=\"link\"><a href=\"/\">Link Test 1</a></span><span class=\"small\">After Link Text</span><span class=\"link\"><a href=\"/\">Link Test 2</a></span><span class=\"small\">After Link Text</span>\r\n    </div>\r\n\r\n\r\n#### Example 4\r\nAnd if we want to have everything on a single line.\r\n\r\n    -# example 3 \r\n    - links = [ \"Link Test 1\", \"Link Test 2\" ]\r\n    %div\r\n      - links.each do |link_name| \r\n        %span.link>\r\n          %a{ :href => \"/\" }><=link_name\r\n        %span.small><\r\n          = after_link\r\n\r\n\r\nResult\r\n    \r\n    <div><span class=\"link\"><a href=\"/\">Link Test 1</a></span><span class=\"small\">After Link Text</span><span class=\"link\"><a href=\"/\">Link Test 2</a></span><span class=\"small\">After Link Text</span></div>\r\n\r\n\r\nEnjoy!\r\n\r\n", :created_at=>2012-06-01 20:00:00 UTC, :updated_at=>2012-06-01 20:07:17 UTC, :tags=>["ruby", "haml"]},
{:title=>"Caching external HTTP requests with VCR in Rack", :body=>"I was recently working on a project to build continuous integration performance tests on an application which makes extensive HTTP based calls to a middleware application. I was running in to issues where the middleware calls were unstable in the test, stage and load test environments. For the purpose of these tests, I was only interested in the render times of the Rails calls. The obvious choice seemed to cache the external HTTP requests. \r\n\r\n[Enter VCR](https://www.relishapp.com/myronmarston/vcr/docs). VCR is a test tool designed to cache external HTTP requests. It uses your favorite mocking tool ([webmock](https://github.com/bblimke/webmock), [flexmock](http://flexmock.rubyforge.org/), etc.) and records HTTP requests and saves them in a YAML (or optionally JSON) file. \r\n\r\nI decided to run a standalone instance of the server with a custom Rack config implementing VCR as a caching layer for initial HTTP requests. After a bit of hacking, it turned out to be way simpler then I expected.\r\n\r\n#### Install VCR and Mock framework\r\n\r\nAlong with VCR, I choose webmock, or rather it was choosen for me -- it's the mock framework currently used in the application I work on.\r\n\r\nInstall VCR\r\n\r\n    $ gem install vcr\r\n    $ gem install webmock\r\n\r\nOr via Gemfile\r\n\r\n    # file: <app_root>/Gemfile\r\n    sources :rubygems\r\n    \r\n    group :performance do\r\n      gem 'vcr'\r\n      gem 'webmock'\r\n    end\r\n    \r\n\r\n#### Configure Rack\r\n\r\nNext add the following to your Rack config file.\r\n\r\n    # file: <app_root>/config.ru\r\n\r\n    # only use cache when running performance tests   \r\n    if ENV['RACK_ENV'] == \"performance\" \r\n      require 'vcr'\r\n      require 'webmock'\r\n     \r\n      # configure VCR \r\n      VCR.configure do |c|\r\n        c.cassette_library_dir  = './cache/' # where to save cache files\r\n        c.hook_into             = :webmock   # select mock framework\r\n      end\r\n     \r\n      use VCR::Middleware::Rack do |cassette|\r\n        cassette.name     'cassette'\r\n        cassette.options  :record => :new_episodes,  # record only new requests\r\n                            :match_requests_on => [:host, :path] \r\n                                                     # define new by host and/or path changes\r\n      end\r\n    end\r\n    \r\n    ... your app config ...\r\n    \r\n\r\n\r\n#### So what does this record?\r\n\r\nFor this example, imagine that your application is making an external call to a service which returns data about a passed keyword. We'll define the host as \"example.org\" and the URI format as \"/q/<keyword>\".\r\n\r\n1. http://example.org/q/food   -- recorded\r\n1. http://example.org/q/bar     -- recorded\r\n1. http://example.org/q/food   -- from cache\r\n1. http://example.org/q/bar     -- from cache\r\n1. etc., etc., etc.\r\n\r\n\r\n### VCR as a Production Cache\r\n\r\nVCR+Rack can be used in this way, although it could be slow if you're caching a large number of HTTP requests or your cached requests are large themselves. \r\n\r\nAlso, I would add an expiration to your cache, which is supported in newer version of VCR\r\n\r\nWhile this is untested, it should look something like this.\r\n\r\n    # file: <app_root>/config.ru\r\n    \r\n    require 'vcr'\r\n    require 'webmock'\r\n    VCR.configure do |c|\r\n      c.cassette_library_dir  = './cache/'\r\n      c.hook_into             = :webmock\r\n    end\r\n    use VCR::Middleware::Rack do |cassette|\r\n      cassette.name     'cassette'\r\n      cassette.option   :record => :new_episodes,  \r\n                          :re_record_interval => 5.minutes, # expire every 5 minutes\r\n                          :match,requests_on => [:host, :path]\r\n    end\r\n    \r\n    ... your app config ...\r\n    \r\n\r\nThe primary issue with this is that all cached requests are stored in a YAML file as a serialized HTTP objects. This can be quite large. If you're making many different quests and/or the results are large, the cache file can quickly become unwieldy (I've seen 150K line YAML files) and the parse time can actually take a while. Use this solution at your own risk and performance test with and without a full cache before putting it in a production environment.\r\n\r\n\r\nEnjoy!", :created_at=>2012-06-04 19:50:34 UTC, :updated_at=>2012-06-04 19:51:20 UTC, :tags=>["ruby", "unicorn", "vcr", "rack", "caching", "webmock"]}]

